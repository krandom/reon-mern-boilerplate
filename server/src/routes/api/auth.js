const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const jwtToken = require('../../helpers/jwtToken');

const nodemailer = require('nodemailer');
const EmailTemplate = require('email-templates').EmailTemplate;

const User = require('../../schema/user.schema');
const userModel = require('../../models/user.model');
const profileModel = require('../../models/profile.model');

const validateSignupInput = require('../../validation/signup');
const validateLoginInput = require('../../validation/login');

const openRoute = require('../../middleware/openRoute');

// @route 		POST api/auth/signup
// @desc 			Routes for creating new user account
// @access 		Public
router.post('/signup', openRoute, async (req, res) => {
	const { email, password } = req.body;
	try {
		const { errors, isValid } = await validateSignupInput({ email, password });

	  if (!isValid)
	    return res.status(400).json({ errors });

    const newUser = new User({
      email,
      password,
    });

		await newUser.save();

		// START OF EMAIL TEST
		// https://codemoto.io/coding/nodejs/nodemailer-email-templates-using-node

		var transport = nodemailer.createTransport({
		  host: "smtp.mailtrap.io",
		  port: 2525,
		  auth: {
		    user: "8fe6489bcd18b7", //generated by Mailtrap
		    pass: "c0f9812da77bc4" //generated by Mailtrap
		  }
		});

		var mailOptions = {
		  from: '"Example Team" <from@example.com>',
		  to: 'bjorkqvist.daniel@gmail.com',
		  subject: 'Nice Nodemailer test',
		  text: 'Hey there, itâ€™s our first message sent with Nodemailer ',
		  html: '<b>Hey there! </b><br> This is our first message sent with Nodemailer<br />',
		};

		transport.sendMail(mailOptions, (error, info) => {
		  if (error) {
		    return console.log(error);
		  }
		  console.log('Message sent: %s', info.messageId);
		});

		const sendResetPasswordLink = transport.templateSender(
	  	new EmailTemplate('./index.ejs'), {
	    	from: 'hello@yourdomain.com',
	  	}
	  );

		// exports.sendPasswordReset = function (email, username, name, tokenUrl) {
    // transporter.template
    sendResetPasswordLink({
      to: 'bjorkqvist.daniel@gmail.com', //email,
      subject: 'Password Reset - YourDomain.com'
    }, {
      name: 'NAME', // name,
      username: 'USERNAME', // username,
      token: 'TOKEN URL', // tokenUrl
    }, function (err, info) {
			if (err) {
				console.log(err)
			} else {
				console.log('Link sent\n'+ JSON.stringify(info));
			}
    });

		// };
		// END OF EMAIL TEST

		res.json({ token: jwtToken.sign(newUser.id) });

	} catch(err) {
		console.error('/auth/signup', err.message);

		res.status(500).send('Server error');
	}
});

// @route 		POST api/auth/signup
// @desc 			Routes for creating new user account
// @access 		Public
router.post('/login', openRoute, async (req, res) => {
	const { email, password } = req.body;

	try {
		const { errors, isValid, user } = await validateLoginInput({ email, password });

	  if (!isValid)
	    return res.status(400).json({ errors });

		res.json({
			token: jwtToken.sign(user._id),
			user: await userModel(user._id),
			profile: await profileModel(user._id),
		})
	} catch(err) {
		console.error('/auth/signup', err.message);

		res.status(500).send('Server error');
	}
});

// @route 		POST api/auth/signup
// @desc 			Routes for creating new user account
// @access 		Public
router.post('/validate-token', async (req, res) => {
	const { token } = req.body;

	try {
		const { user } = jwtToken.verify({ token });

		res.json({
			message: 'Token is valid',
			user: await userModel(user.id),
			profile: await profileModel(user.id),
		})
	} catch(err) {
		console.error('/auth/validate-token', err.message);

		res.status(200).json({ message: 'No token, Auth denied', user: null });
	}
});

module.exports = router;